About
================

PackageMaker is a tool to automate process to package files, dirs and symlinks.

It helps building packages of existing files on your system by automating
almost all of the steps needed for packaing: arrange source tree, create
makefiles and rpm specs or debina packaging files, etc.


It will try gathering the information of files, dirs and symlinks in given path
list, and then:

1. arrange src tree contains these files, dirs and symlinks with these
   relative path kept, and build files (Makefile.am, configure.ac, etc.)
   to install these.

2. generate packaging metadata like RPM SPEC, debian/rules, etc.

3. build package such as rpm, src.rpm, deb, etc.


NOTE: The permissions of the files might be lost during packaging process. If
you want to ensure these are saved or force set permissions as you wanted,
specify these explicitly in Makefile.am or rpm spec, etc.


How to build
================


Build w/ mock
------------------------

It takes some time to make a rpm but should be better, I think.

1. python setup.py srpm
2. mock -r <target_build_dist> dist/SRPMS/packagemaker-*.src.rpm


Build w/o mock
------------------------

It's easier than the above but only possible to make a rpm for build host.

1. python setup.py rpm


How to test
================

* Unit tests: `python setup.py test`
* Unit tests + System tests: `python setup.py test --full`

If you want to test specific python code:

a. source code: ./runtest.sh <path_to_python_source>
b. a class in source code: ./runtest.sh <path_to_python_source>:<class_name>
c. a method of a class in source code:./runtest.sh <path_to_python_source>:<class_name>.<method_name>


SEE ALSO: nosetests(1)


Here are some examples:

::

  $ ./runtest.sh pmaker/tests/rpmutils.py
  FIXME: Implement tests for this function ... ok
  test_info_by_path (pmaker.tests.rpmutils.TestFunctions) ... ok
  test_rpm_attr (pmaker.tests.rpmutils.TestFunctions) ... ok
  test_rpm_search_provides_by_path (pmaker.tests.rpmutils.TestFunctions) ... ok
  test_rpmh2nvrae (pmaker.tests.rpmutils.TestFunctions) ... ok
  test_rpmh2nvrae__no_rpmdb (pmaker.tests.rpmutils.TestFunctions) ... ok
  FIXME: Implement tests for this function ... ok
  FIXME: Implement tests for this function ... ok

  ----------------------------------------------------------------------
  Ran 8 tests in 0.517s

  OK
  $ ./runtest.sh pmaker/models/tests/FileInfo.py:TestFileInfo
  test__init__ (pmaker.models.tests.FileInfo.TestFileInfo) ... ok

  ----------------------------------------------------------------------
  Ran 1 test in 0.019s

  OK
  $ ./runtest.sh tests/07_multi_files_filelist_json.py:Test_00_multi_files_filelist_json.test_01_system_files__tgz
  test_01_system_files__tgz (tests.07_multi_files_filelist_json.Test_00_multi_files_filelist_json) ... configure.ac:2: installing `./install-sh'
  configure.ac:2: installing `./missing'
  ok

  ----------------------------------------------------------------------
  Ran 1 test in 21.479s

  OK
  $


HACKING
================

This is my usual way for enhancements:

1. create a branch: git branch foo
2. modify or add code to archive objective enhancements in that branch: git checkout foo; vim ...
3. add (unit) tests for enhancements to verify the correctness of changes
4. commit and run full test (unit + system tests)

if all looks ok, merge the branch to main.


And here is my usual way for bug fixes:

1. Write tests for the bug
2. Modify / add code for the fix
3. Run the tests and confirm if the fix was right


TODO
================

* correct wrong English expressions
* refactor its architecture:

  * central configuration management:

    * package metadata passed thru JSON/YAML/XML data

  * central object registration system
  * plugin system: stabilize the API of the plugin system
  * make collector (generator) and packagemaker classes loosely-coupled
  * separate packaging strategy (PackageMaker._scheme) and packaging format
    (PackageMaker._format)

* define schema for input (JSON, YAML?, XML?, ...)

  * perhaps, the contents of files will be gotten from external site pointed by
    URL reference in JSON data

* more complete tests
* sort out command line options: Work in progress
* eliminate the strong dependency to rpm and make it runnable on debian based
  systems (w/o rpm-python)
* find causes of warnings during deb build and fix them all
* keep permissions of targets in tar archives


References
================

In random order:

* http://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch-creating-rpms.html
* http://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch-rpm-programming-python.html
* http://cdbs-doc.duckcorp.org
* https://wiki.duckcorp.org/DebianPackagingTutorial/CDBS
* http://kitenet.net/~joey/talks/debhelper/debhelper-slides.pdf
* http://wiki.debian.org/IntroDebianPackaging
* http://www.debian.org/doc/maint-guide/ch-dother.ja.html


Alternatives
================

Basic idea and implementation design of PackageMaker was arised from offhand
talk with my very talented co-worker, Masatake Yamato (yamato at redhat.com).

Around the same time I started working on PackageMaker, Magnus-san developed
buildrpm and I was very impressed with it. Implementation was completely
different but PackageMaker and buildrpm do the same thing basically.

I believe PackageMaker is useful and helps you but if you want features
PackageMaker lacks or will not have or you don't like it, take a look at
buildrpm:

* buildrpm: http://magnusg.fedorapeople.org/buildrpm/


License
================

Copyright (C) 2011 Satoru SATOH <satoru.satoh @ gmail.com>
Copyright (C) 2011 Satoru SATOH <ssato @ redhat.com>

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.



Author
================

Satoru SATOH <ssato at redhat.com>


.. vim: sw=2 ts=2 et
